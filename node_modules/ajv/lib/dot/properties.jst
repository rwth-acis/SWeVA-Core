{{# def.definitions }}
{{# def.setup:'properties' }}
{{# def.setupNextLevel }}


{{## def.validateAdditional:
  {{ /* additionalProperties is schema */
    $it.schema = $aProperties;
    $it.schemaPath = it.schemaPath + '.additionalProperties';
    $it.errorPath = it.errorPath;
    var $passData = $data + '[key' + $lvl + ']';
  }}

  {{ var $code = it.validate($it); }}
  {{# def.optimizeValidate }}
#}}


{{
  var $dataNxt = $it.dataLevel = it.dataLevel + 1
    , $nextData = 'data' + $dataNxt;

  var $schemaKeys = Object.keys($schema || {})
    , $pProperties = it.schema.patternProperties || {}
    , $pPropertyKeys = Object.keys($pProperties)
    , $aProperties = it.schema.additionalProperties
    , $someProperties = $schemaKeys.length || $pPropertyKeys.length
    , $noAdditional = $aProperties === false
    , $additionalIsSchema = typeof $aProperties == 'object'
                              && Object.keys($aProperties).length
    , $removeAdditional = it.opts.removeAdditional
    , $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional
    , $requiredProperties = it.util.toHash(it.schema.required || []);
}}


var {{=$errs}} = errors;
var valid{{=$it.level}} = true;

{{? $checkAdditional }}
  for (var key{{=$lvl}} in {{=$data}}) {
    {{? $someProperties }}
      var isAdditional{{=$lvl}} = !(false
        {{? $schemaKeys.length }}
          {{? $schemaKeys.length > 5 }}
            || validate.schema{{=$schemaPath}}[key{{=$lvl}}]
          {{??}}
            {{~ $schemaKeys:$propertyKey }}
              || key{{=$lvl}} == {{= it.util.toQuotedString($propertyKey) }}
            {{~}}
          {{?}}
        {{?}}
        {{? $pPropertyKeys.length }}
          {{~ $pPropertyKeys:$pProperty:$i }}
            || {{= it.usePattern($pProperty) }}.test(key{{=$lvl}})
          {{~}}
        {{?}}
      );

      if (isAdditional{{=$lvl}}) {
    {{?}}
    {{? $removeAdditional == 'all' }}
      delete {{=$data}}[key{{=$lvl}}];
    {{??}}
      {{
        var $currentErrorPath = it.errorPath;
        it.errorPath = it.util.getPathExpr(it.errorPath, 'key' + $lvl, it.opts.jsonPointers);
      }}
      {{? $noAdditional }}
        {{? $removeAdditional }}
          delete {{=$data}}[key{{=$lvl}}];
        {{??}}
          valid{{=$it.level}} = false;
          {{# def.error:'additionalProperties' }}
          {{? $breakOnError }} break; {{?}}
        {{?}}
      {{?? $additionalIsSchema }}
        {{? $removeAdditional == 'failing' }}
          var {{=$errs}} = errors;
          {{# def.setCompositeRule }}

          {{# def.validateAdditional }}

          if (!valid{{=$it.level}}) {
            errors = {{=$errs}};
            if (validate.errors !== null) {
              if (errors) validate.errors.length = errors;
              else validate.errors = null;
            }
            delete {{=$data}}[key{{=$lvl}}];
          }

          {{# def.resetCompositeRule }}
        {{??}}
          {{# def.validateAdditional }}
          {{? $breakOnError }} if (!valid{{=$it.level}}) break; {{?}}
        {{?}}
      {{?}}
      {{ it.errorPath = $currentErrorPath; }}
    {{?}}
    {{? $someProperties }}
      }
    {{?}}
  }

  {{# def.ifResultValid }}
{{?}}

{{? $schemaKeys.length }}
  {{~ $schemaKeys:$propertyKey }}
    {{ var $sch = $schema[$propertyKey]; }}

    {{? {{# def.nonEmptySchema:$sch}} }}
      {{
        $it.schema = $sch;
        var $prop = it.util.getProperty($propertyKey)
          , $passData = $data + $prop;
        $it.schemaPath = $schemaPath + $prop;
        $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
      }}

      {{ var $code = it.validate($it); }}

      {{? {{# def.willOptimize }} }}
        {{
          $code = {{# def._optimizeValidate }};
          var $useData = $passData;
        }}
      {{??}}
        {{ var $useData = $nextData; }}
        var {{=$nextData}} = {{=$passData}};
      {{?}}

      {{? $requiredProperties[$propertyKey] }}
        if ({{=$useData}} === undefined) {
          valid{{=$it.level}} = false;
          {{
            var $currentErrorPath = it.errorPath
              , $missingProperty = it.util.escapeQuotes($propertyKey);
            it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
          }}
          {{# def.error:'required' }}
          {{ it.errorPath = $currentErrorPath; }}
        } else {
      {{??}}
        {{? $breakOnError }}
          if ({{=$useData}} === undefined) {
            valid{{=$it.level}} = true;
          } else {
        {{??}}
          if ({{=$useData}} !== undefined) {
        {{?}}
      {{?}}

        {{= $code }}
      }
    {{?}} {{ /* def.nonEmptySchema */ }}

    {{# def.ifResultValid }}
  {{~}}
{{?}}

{{~ $pPropertyKeys:$pProperty }}
  {{ var $sch = $pProperties[$pProperty]; }}

  {{? {{# def.nonEmptySchema:$sch}} }}
    {{
      $it.schema = $sch;
      $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
    }}

    for (var key{{=$lvl}} in {{=$data}}) {
      if ({{= it.usePattern($pProperty) }}.test(key{{=$lvl}})) {
        {{
          $it.errorPath = it.util.getPathExpr(it.errorPath, 'key' + $lvl, it.opts.jsonPointers);
          var $passData = $data + '[key' + $lvl + ']';
        }}

        {{ var $code = it.validate($it); }}
        {{# def.optimizeValidate }}

        {{? $breakOnError }} if (!valid{{=$it.level}}) break; {{?}}
      }
      {{? $breakOnError }} else valid{{=$it.level}} = true; {{?}}
    }

    {{# def.ifResultValid }}
  {{?}} {{ /* def.nonEmptySchema */ }}
{{~}}

{{? $breakOnError }}
  {{= $closingBraces }}
  if ({{=$errs}} == errors) {
{{?}}

{{# def.cleanUp }}
