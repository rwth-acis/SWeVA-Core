'use strict';
module.exports = function generate_properties(it) {
  var out = ' ';
  var $lvl = it.level,
    $dataLvl = it.dataLevel,
    $schema = it.schema['properties'],
    $schemaPath = it.schemaPath + '.' + 'properties',
    $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || ''),
    $valid = 'valid' + $lvl,
    $errs = 'errs' + $lvl;
  var $it = it.util.copy(it),
    $closingBraces = '';
  $it.level++;
  var $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt;
  var $schemaKeys = Object.keys($schema || {}),
    $pProperties = it.schema.patternProperties || {},
    $pPropertyKeys = Object.keys($pProperties),
    $aProperties = it.schema.additionalProperties,
    $someProperties = $schemaKeys.length || $pPropertyKeys.length,
    $noAdditional = $aProperties === false,
    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
    $removeAdditional = it.opts.removeAdditional,
    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
    $requiredProperties = it.util.toHash(it.schema.required || []);
  out += 'var ' + ($errs) + ' = errors;var valid' + ($it.level) + ' = true;';
  if ($checkAdditional) {
    out += ' for (var key' + ($lvl) + ' in ' + ($data) + ') { ';
    if ($someProperties) {
      out += ' var isAdditional' + ($lvl) + ' = !(false ';
      if ($schemaKeys.length) {
        if ($schemaKeys.length > 5) {
          out += ' || validate.schema' + ($schemaPath) + '[key' + ($lvl) + '] ';
        } else {
          var arr1 = $schemaKeys;
          if (arr1) {
            var $propertyKey, i1 = -1,
              l1 = arr1.length - 1;
            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += ' || key' + ($lvl) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;
        if (arr2) {
          var $pProperty, $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += ' || ' + (it.usePattern($pProperty)) + '.test(key' + ($lvl) + ') ';
          }
        }
      }
      out += ' ); if (isAdditional' + ($lvl) + ') { ';
    }
    if ($removeAdditional == 'all') {
      out += ' delete ' + ($data) + '[key' + ($lvl) + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      it.errorPath = it.util.getPathExpr(it.errorPath, 'key' + $lvl, it.opts.jsonPointers);
      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + ($data) + '[key' + ($lvl) + ']; ';
        } else {
          out += ' valid' + ($it.level) + ' = false;  ';
          if (!it.compositeRule && $breakOnError) {
            out += ' validate.errors = [ { keyword: \'' + ('additionalProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should NOT have additional properties\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: false ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            out += '  }]; return false; ';
          } else {
            out += '  var err =   { keyword: \'' + ('additionalProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should NOT have additional properties\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: false ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + ($errs) + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errorPath = it.errorPath;
          var $passData = $data + '[key' + $lvl + ']';
          var $code = it.validate($it);
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          out += ' if (!valid' + ($it.level) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[key' + ($lvl) + ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errorPath = it.errorPath;
          var $passData = $data + '[key' + $lvl + ']';
          var $code = it.validate($it);
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!valid' + ($it.level) + ') break; ';
          }
        }
      }
      it.errorPath = $currentErrorPath;
    }
    if ($someProperties) {
      out += ' } ';
    }
    out += ' }  ';
    if ($breakOnError) {
      out += ' if (valid' + ($it.level) + ') { ';
      $closingBraces += '}';
    }
  }
  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;
    if (arr3) {
      var $propertyKey, i3 = -1,
        l3 = arr3.length - 1;
      while (i3 < l3) {
        $propertyKey = arr3[i3 += 1];
        var $sch = $schema[$propertyKey];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          var $prop = it.util.getProperty($propertyKey),
            $passData = $data + $prop;
          $it.schemaPath = $schemaPath + $prop;
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          var $code = it.validate($it);
          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
          }
          if ($requiredProperties[$propertyKey]) {
            out += ' if (' + ($useData) + ' === undefined) { valid' + ($it.level) + ' = false; ';
            var $currentErrorPath = it.errorPath,
              $missingProperty = it.util.escapeQuotes($propertyKey);
            it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            if (!it.compositeRule && $breakOnError) {
              out += ' validate.errors = [ { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
              if (it.opts.messages !== false) {
                out += ' , message: \'is a required property\' ';
              }
              if (it.opts.verbose || it.opts.i18n) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' ';
              }
              if (it.opts.verbose) {
                out += ' , data: ' + ($data) + ' ';
              }
              if (it.opts.i18n) {
                out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
              }
              out += ' }]; return false; ';
            } else {
              out += '  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
              if (it.opts.messages !== false) {
                out += ' , message: \'is a required property\' ';
              }
              if (it.opts.verbose || it.opts.i18n) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' ';
              }
              if (it.opts.verbose) {
                out += ' , data: ' + ($data) + ' ';
              }
              if (it.opts.i18n) {
                out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
              }
              out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            it.errorPath = $currentErrorPath;
            out += ' } else { ';
          } else {
            if ($breakOnError) {
              out += ' if (' + ($useData) + ' === undefined) { valid' + ($it.level) + ' = true; } else { ';
            } else {
              out += ' if (' + ($useData) + ' !== undefined) { ';
            }
          }
          out += ' ' + ($code) + ' } ';
        }
        if ($breakOnError) {
          out += ' if (valid' + ($it.level) + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  var arr4 = $pPropertyKeys;
  if (arr4) {
    var $pProperty, i4 = -1,
      l4 = arr4.length - 1;
    while (i4 < l4) {
      $pProperty = arr4[i4 += 1];
      var $sch = $pProperties[$pProperty];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        $it.schema = $sch;
        $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
        out += ' for (var key' + ($lvl) + ' in ' + ($data) + ') { if (' + (it.usePattern($pProperty)) + '.test(key' + ($lvl) + ')) { ';
        $it.errorPath = it.util.getPathExpr(it.errorPath, 'key' + $lvl, it.opts.jsonPointers);
        var $passData = $data + '[key' + $lvl + ']';
        var $code = it.validate($it);
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        if ($breakOnError) {
          out += ' if (!valid' + ($it.level) + ') break; ';
        }
        out += ' } ';
        if ($breakOnError) {
          out += ' else valid' + ($it.level) + ' = true; ';
        }
        out += ' }  ';
        if ($breakOnError) {
          out += ' if (valid' + ($it.level) + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
}
