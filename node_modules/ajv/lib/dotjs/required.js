'use strict';
module.exports = function generate_required(it) {
  var out = ' ';
  var $lvl = it.level,
    $dataLvl = it.dataLevel,
    $schema = it.schema['required'],
    $schemaPath = it.schemaPath + '.' + 'required',
    $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || ''),
    $valid = 'valid' + $lvl,
    $errs = 'errs' + $lvl;
  if (it.schema.properties && Object.keys(it.schema.properties).length) {
    var $required = [];
    var arr1 = $schema;
    if (arr1) {
      var $property, i1 = -1,
        l1 = arr1.length - 1;
      while (i1 < l1) {
        $property = arr1[i1 += 1];
        var $propertySch = it.schema.properties[$property];
        if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
          $required[$required.length] = $property;
        }
      }
    }
  } else {
    var $required = $schema;
  }
  if ($required.length) {
    var $currentErrorPath = it.errorPath;
    if ($breakOnError) {
      out += ' var missing' + ($lvl) + '; ';
      if ($required.length <= 20) {
        out += ' if ( ';
        var arr2 = $required;
        if (arr2) {
          var $property, $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $property = arr2[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($property);
            out += ' ( ' + ($data) + ($prop) + ' === undefined && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $property : $prop)) + ') ) ';
          }
        }
        out += ') { ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = '\' + ' + $propertyPath + ' + \'';
        it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        if (!it.compositeRule && $breakOnError) {
          out += ' validate.errors = [ { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'is a required property\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          if (it.opts.i18n) {
            out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
          }
          out += ' }]; return false; ';
        } else {
          out += '  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'is a required property\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          if (it.opts.i18n) {
            out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
          }
          out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      } else {
        out += '  var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + '; ';
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = '\' + "\'" + ' + $propertyPath + ' + "\'" + \'';
        it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < schema' + ($lvl) + '.length; ' + ($i) + '++) { var ' + ($valid) + ' = ' + ($data) + '[schema' + ($lvl) + '[' + ($i) + ']] !== undefined; if (!' + ($valid) + ') break; }  if (!' + ($valid) + ') {  ';
        if (!it.compositeRule && $breakOnError) {
          out += ' validate.errors = [ { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'is a required property\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          if (it.opts.i18n) {
            out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
          }
          out += ' }]; return false; ';
        } else {
          out += '  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'is a required property\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          if (it.opts.i18n) {
            out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
          }
          out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      }
    } else {
      if ($required.length <= 20) {
        var arr3 = $required;
        if (arr3) {
          var $property, $i = -1,
            l3 = arr3.length - 1;
          while ($i < l3) {
            $property = arr3[$i += 1];
            var $prop = it.util.getProperty($property),
              $missingProperty = it.util.escapeQuotes($prop);
            it.errorPath = it.util.getPath($currentErrorPath, $property, it.opts.jsonPointers);
            out += ' if (' + ($data) + ($prop) + ' === undefined) {  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'is a required property\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
            }
            out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      } else {
        out += '  var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + '; ';
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = '\' + "\'" + ' + $propertyPath + ' + "\'" + \'';
        it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < schema' + ($lvl) + '.length; ' + ($i) + '++) { if (' + ($data) + '[schema' + ($lvl) + '[' + ($i) + ']] === undefined) {  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'is a required property\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
        }
        out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
      }
    }
    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }
  return out;
}
